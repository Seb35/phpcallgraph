<?php
require_once 'PHPUnit/Framework.php';

// set up include path
set_include_path(
    realpath(dirname(__FILE__) . '/../src') . PATH_SEPARATOR
    . realpath(dirname(__FILE__) . '/../lib/ezcomponents-instantsvc/components') . PATH_SEPARATOR
    //. realpath(dirname(__FILE__) . '/../lib/ezcomponents') . PATH_SEPARATOR
    . realpath(dirname(__FILE__) . '/../lib') . PATH_SEPARATOR
    . get_include_path() . PATH_SEPARATOR
    . realpath(dirname(__FILE__) . '/../lib/pear')
);

// configure eZ Components autoloader
// required because of PHPCallGraphCli using eczConsoleTools
// and PHPCallGraph leveraging InstantSVC CodeAnalyzer and Extended Reflection API
require_once 'autoload-ezcomponents.php';

require_once 'PHPCallGraphCli.php';

/**
 * Test class for PHPCallGraphCli.
 * Generated by PHPUnit on 2009-05-06 at 21:36:06.
 */
class PHPCallGraphCliTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    PHPCallGraphCli
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->object = new PHPCallGraphCli;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    public function getCommandLines() {
        $commandLines = array(
            // needs output buffering: array('--help', ''),
        );
        $optionSets = array(
            '',
            '--noexternalcalls',
            '--phpfunctions',
            '--noexternalcalls --phpfunctions',
        );
        $argumentSets = array(
            'testfiles',
        );
        $outputFormats = array(
            'txt',
            'array',
            'deadcode',
            //'cga', cannot be tested like this, since it contains absolute paths
            'dot',
        );

        foreach ($optionSets as $optionSet) {
            foreach ($argumentSets as $argumentSet) {
                foreach ($outputFormats as $outputFormat) {
                    $commandLines[] = array($optionSet, $argumentSet, $outputFormat);
                }
            }
        }
        return $commandLines;
    }

    /**
     * @dataProvider getCommandLines
     */
    public function testRun($options, $arguments, $outputFormat) {
        $outputDir = dirname(__FILE__) . '/output';
        if (!file_exists($outputDir)) {
            mkdir($outputDir, 0766, true);
        }
        switch ($outputFormat) {
            case 'dot':
                $extension = '.dot';
                break;
            case 'cga':
                $extension = '.xml';
                break;
            default:
                $extension = '.txt';
        }
        $outputFileName = 'phpcallgraph ';
        if (!empty($options)) {
            $outputFileName .= $options . ' ';
        }
        $outputFileName .= "--format $outputFormat -- "
            . preg_replace('/[^-.+A-Za-z0-9]/', '_', $arguments) . $extension;
        $outputFile = $outputDir . '/' . $outputFileName;
        $_SERVER["argv"] = explode(' ', $options);
        $_SERVER["argv"][] = '-f';
        $_SERVER["argv"][] = $outputFormat;
        $_SERVER["argv"][] = '-o';
        $_SERVER["argv"][] = $outputFile;
        $_SERVER["argv"][] = '--';
        $_SERVER["argv"] = array_merge($_SERVER["argv"], explode(' ' . dirname(__FILE__) . '/' , dirname(__FILE__) . '/' . $arguments));
        //var_dump($_SERVER["argv"]);
        $this->object->run();
        $actual = file_get_contents($outputFile);
        $expectedFile = "$outputDir/.svn/text-base/$outputFileName.svn-base";
        $expected = file_get_contents($expectedFile);
        $this->assertEquals($expected, $actual);
    }
}
?>
